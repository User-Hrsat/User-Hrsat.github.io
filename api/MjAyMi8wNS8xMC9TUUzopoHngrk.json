{"title":"SQL要点","date":"2022-05-10T11:18:00.000Z","date_formatted":{"ll":"2022年5月10日","L":"2022/05/10","MM-DD":"05-10"},"link":"2022/05/10/SQL要点","tags":["MySQL","学习总结"],"categories":["SQL"],"updated":"2022-05-14T01:54:00.000Z","content":"<h2 id=\"sql-要点\">SQL 要点<a title=\"#sql-要点\" href=\"#sql-要点\"></a></h2>\n<h3 id=\"表的创建\">表的创建<a title=\"#表的创建\" href=\"#表的创建\"></a></h3>\n<hr>\n<h4 id=\"常用数据类型\">常用数据类型<a title=\"#常用数据类型\" href=\"#常用数据类型\"></a></h4>\n<ul>\n<li>串(字符序列？)</li>\n</ul>\n<ol start=\"0\">\n<li><code>CHAR</code> : <code>1~255</code> 定长字符串；长度在创建时指定，未指定则默认为 <code>1</code></li>\n<li><code>VARCHAR</code> : 可变长度；最多不超过 <code>255</code>，创建时可指定最大长度</li>\n</ol>\n<ul>\n<li>数值</li>\n</ul>\n<ol start=\"0\">\n<li><code>TINYINT</code> : 整数值；<code>-128~127</code>，<code>UNSIGNED</code> 为 <code>0~255</code></li>\n<li><code>INT</code> : 整数值；<code>-2147483648～2147483647</code>，<code>UNSIGNED</code> 为 <code>0～4294967295</code></li>\n<li><code>FLOAT</code> : 单精度浮点数</li>\n<li><code>DOUBLE</code> : 双精度浮点数</li>\n<li><code>DECIMAL(或DEC)</code> : 精度可变的浮点数</li>\n<li><code>BOOLEAN</code> : 布尔值</li>\n</ol>\n<ul>\n<li>日期和时间</li>\n</ul>\n<ol start=\"0\">\n<li><code>DATE</code> : <code>1000-01-01～9999-12-31</code>，格式 <code>YYYY-MM-DD</code></li>\n<li><code>TIME</code> : 格式 <code>HH:MM:SS</code></li>\n<li><code>DATETIME</code> : <code>DATE</code> 与 <code>TIME</code> 的组合</li>\n<li><code>TIMESTAMP</code> : 功能与 <code>DATETIME</code> 相同(但范围较小)</li>\n<li><code>YEAR</code> : 用2位数字表示，范围是 <code>70(1970)～69(2069 )</code>，用4位数字表示，范围是 <code>1901～2155</code></li>\n</ol>\n<ul>\n<li>二进制(存文件什么的)</li>\n</ul>\n<ol start=\"0\">\n<li><code>BLOB</code> : 最大长度 <code>64KB</code></li>\n<li><code>TINYBLOB</code> : 最大长度 <code>255字节</code></li>\n<li><code>MEDIUMBLOB</code> : 最大长度 <code>16MB</code></li>\n<li><code>LONGBLOB</code> : 最大长度 <code>4GB</code></li>\n</ol>\n<h4 id=\"列的约束\">列的约束<a title=\"#列的约束\" href=\"#列的约束\"></a></h4>\n<ol start=\"0\">\n<li><code>AUTO_INCREMENT</code> : 设置字段自增，比如 <code>ID</code> 自增</li>\n<li><code>DEFAULT</code> : 指定字段默认值</li>\n<li><code>PRIMARY KEY</code> : 主键,不为空且唯一</li>\n<li><code>FOREIGN KEY</code> : 外键，包含其他表的主键</li>\n</ol>\n<h4 id=\"引擎类型\">引擎类型<a title=\"#引擎类型\" href=\"#引擎类型\"></a></h4>\n<ul>\n<li><code>ENGINE</code></li>\n</ul>\n<ol start=\"0\">\n<li><code>InnoDB</code></li>\n<li><code>MEMORY</code></li>\n<li><code>MyISAM</code></li>\n</ol>\n<h3 id=\"表的更新\">表的更新<a title=\"#表的更新\" href=\"#表的更新\"></a></h3>\n<hr>\n<h4 id=\"字段操作\">字段操作<a title=\"#字段操作\" href=\"#字段操作\"></a></h4>\n<p><code>ALTER TABLE</code></p>\n<ul>\n<li>\n<p>添加字段<br>\n<code>ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; &lt;类型&gt; [约束]</code></p>\n</li>\n<li>\n<p>字段更改</p>\n</li>\n</ul>\n<ol start=\"0\">\n<li><code>CHANGE</code> ::=<br>\n<code>ALTER TABLE &lt;表名&gt; CHANGE &lt;旧列名&gt; &lt;新列名&gt; &lt;类型&gt; [约束]</code> !!: 改列名<br>\n<code>| ALTER TABLE &lt;表名&gt; CHANGE &lt;列名&gt; &lt;列名&gt; &lt;类型&gt; [约束]</code> !!: 改属性</li>\n<li><code>MODIFY</code> ::=<br>\n<code>ALTER TABLE &lt;表名&gt; MODEIFY &lt;列名&gt; &lt;类型&gt; [约束]</code><br>\n!!: 不能更改列名</li>\n</ol>\n<ul>\n<li>\n<p>字段删除<br>\n<code>DROP COLUMN</code> ::= <code>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;</code></p>\n</li>\n<li>\n<p>重命名表<br>\n<code>RENAME TABLE</code> ::= <code>RENAME TABLE &lt;旧表名&gt; &lt;新表名&gt;...</code></p>\n</li>\n</ul>\n<h4 id=\"数据操作\">数据操作<a title=\"#数据操作\" href=\"#数据操作\"></a></h4>\n<ul>\n<li>\n<p>更新数据<br>\n<code>UPDATE &lt;表名&gt; SET &lt;列名&gt; = &lt;数据&gt;... [WHERE &lt;条件&gt;]</code><br>\n!!: 没有条件就可以更改字段的全部值</p>\n</li>\n<li>\n<p>删除数据<br>\n<code>DELETE FROM &lt;表名&gt; [WHERE &lt;条件&gt;]</code><br>\n!!: 没有条件则可以清空表中数据</p>\n</li>\n</ul>\n<h3 id=\"表的查询\">表的查询<a title=\"#表的查询\" href=\"#表的查询\"></a></h3>\n<hr>\n<h4 id=\"过滤\">过滤<a title=\"#过滤\" href=\"#过滤\"></a></h4>\n<ul>\n<li>\n<p><code>IN</code><br>\n<code>IN (数据, 数据)</code></p>\n</li>\n<li>\n<p><code>LIKE</code><br>\n<code>LIKE &lt;通配符&gt;</code></p>\n</li>\n</ul>\n<ol start=\"0\">\n<li><code>%</code> : 表示任意字符出现任意次数</li>\n<li><code>_</code> : 表示任意字符,一个 <code>_</code> 只匹配一个字符</li>\n<li>指定文本</li>\n</ol>\n<h4 id=\"分组过滤\">分组过滤<a title=\"#分组过滤\" href=\"#分组过滤\"></a></h4>\n<p><code>HAVING</code> 过滤 <code>GROUP BY</code> 后的数据，功能与 <code>WHERE</code> 类似</p>\n<ol start=\"0\">\n<li><code>WHERE</code> : 行过滤</li>\n<li><code>HAVING</code> : 分组过滤</li>\n</ol>\n<h4 id=\"数据处理函数\">数据处理函数<a title=\"#数据处理函数\" href=\"#数据处理函数\"></a></h4>\n<ul>\n<li>常用文本处理函数</li>\n</ul>\n<ol start=\"0\">\n<li><code>Left()</code> : 返回传左边的字符</li>\n<li><code>Length()</code> : 返回串的长度</li>\n<li><code>Loacte()</code> : 找出串的一个子串</li>\n<li><code>Lower()</code> : 将串转换为小写</li>\n<li><code>LTrim()</code> : 去掉串左边的空格</li>\n<li><code>Right()</code> : 返回串右边的字符</li>\n<li><code>RTrim()</code> : 去掉串右边的空格</li>\n<li><code>Soundex()</code> : 返回串的SOUNDEX值</li>\n<li><code>SubString()</code> : 返回子串的字符</li>\n<li><code>Upper()</code> : 将串转换为大写</li>\n</ol>\n<ul>\n<li>常用日期和时间处理函数</li>\n</ul>\n<ol start=\"0\">\n<li><code>AddDate()</code> : 增加一个日期(天、周等)</li>\n<li><code>AddTime()</code> : 增加一个时间(时、分等)</li>\n<li><code>CurDate()</code> : 返回当前日期</li>\n<li><code>CurTime()</code> : 返回当前时间</li>\n<li><code>Date()</code> : 返回日期时间的日期部分</li>\n<li><code>DateDiff()</code> : 计算两个日期之差</li>\n<li><code>Date_Add()</code> : 高度灵活的日期运算函数</li>\n<li><code>Date_Format()</code> : 返回一个格式化的日期或时间串</li>\n<li><code>Day()</code> : 返回一个日期的天数部分</li>\n<li><code>DayOfWeek()</code> : 对于一个日期，返回对应的星期几</li>\n<li><code>Hour()</code> : 返回一个时间的小时部分</li>\n<li><code>Minute()</code> : 返回一个时间的分钟部分</li>\n<li><code>Month()</code> : 返回一个日期的月份部分</li>\n<li><code>Now()</code> : 返回当前日期和时间</li>\n<li><code>Second()</code> : 返回一个时间的秒部分</li>\n<li><code>Time()</code> : 返回一个日期时间的时间部分</li>\n<li><code>Year()</code> : 返回一个日期的年份部分</li>\n</ol>\n<ul>\n<li>常用数值处理函数</li>\n</ul>\n<ol start=\"0\">\n<li><code>Abs()</code> : 返回一个数的绝对值</li>\n<li><code>Cos()</code> : 返回一个角度的余弦</li>\n<li><code>Exp()</code> : 返回一个数的指数值</li>\n<li><code>Mod()</code> : 返回除操作的余数</li>\n<li><code>Pi()</code> : 返回圆周率</li>\n<li><code>Rand()</code> : 返回一个随机数</li>\n<li><code>Sin()</code> : 返回一个角度的正弦</li>\n<li><code>Sqrt()</code> : 返回一个数的平方根</li>\n<li><code>Tan()</code> : 返回一个角度的正切</li>\n</ol>\n<h4 id=\"聚集函数-|-聚合函数\">聚集函数 | 聚合函数<a title=\"#聚集函数-|-聚合函数\" href=\"#聚集函数-|-聚合函数\"></a></h4>\n<p>聚合函数用于 <code>SELECT</code> 子句<br>\n<code>SELECT &lt;FUNC(列名)&gt;...</code><br>\n<code>COUNT()</code> : 总行数<br>\n<code>MAX()</code> : 最大值<br>\n<code>MIN()</code> : 最小值<br>\n<code>SUM()</code> : 求合<br>\n<code>AVG()</code> : 平均值</p>\n<h4 id=\"排序\">排序<a title=\"#排序\" href=\"#排序\"></a></h4>\n<p><code>ORDER BY &lt;列名&gt; [DESC|ASC]</code><br>\n!!: 默认为升序 <code>ASC</code></p>\n<h4 id=\"限制结果\">限制结果<a title=\"#限制结果\" href=\"#限制结果\"></a></h4>\n<p><code>LIMIT &lt;ROW_COUNT&gt; [OFFSET OF_COUNT]</code><br>\n限制输出的个数和偏移量<br>\n给定偏移量的情况下会先偏移</p>\n<h4 id=\"简单联结\">简单联结<a title=\"#简单联结\" href=\"#简单联结\"></a></h4>\n<ul>\n<li>内部连接 <code>INNER JOIN</code> | 等值联结 <em>(? 等价还是包含</em></li>\n</ul>\n<ol start=\"0\">\n<li>\n<p>内联结<br>\n<code>SELECT &lt;列名&gt; FROM &lt;表名&gt; INNER JOIN &lt;表名&gt; ON &lt;条件&gt;</code></p>\n</li>\n<li>\n<p>等值联结<br>\n<code>SELECT &lt;列名&gt; FROM &lt;表名&gt;, &lt;表名&gt; [WHERE &lt;条件&gt;]</code><br>\n<code>&lt;条件&gt;</code> ::= <code>&lt;表名&gt;.&lt;列名&gt; = &lt;表名&gt;.&lt;列名&gt;...</code></p>\n</li>\n</ol>\n<ul>\n<li><strong>笛卡儿积(cartesian product)</strong> (又称交叉联结 <code>CROSS JOIN</code><br>\n由没有联结条件的表关系返回的结果为笛卡儿积。<br>\n检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。<br>\n<img src=\"img/CartesianProduct.png\" alt=\"笛卡儿积\" loading=\"lazy\"></li>\n</ul>\n<h4 id=\"高级联结\">高级联结<a title=\"#高级联结\" href=\"#高级联结\"></a></h4>\n<ul>\n<li>\n<p>表别名<br>\n<code>SELECT &lt;列名&gt; FROM &lt;表名&gt; AS &lt;别名&gt; [WHERE &lt;条件&gt;]</code></p>\n</li>\n<li>\n<p>自联结 <code>SELF-JOIN</code><br>\n<code>SELECT &lt;别名&gt;.&lt;列名&gt;... FROM &lt;表名&gt; AS &lt;别名&gt;, &lt;表名&gt; AS &lt;别名&gt;... WHERE &lt;别名&gt;.&lt;列名&gt; = &lt;别名&gt;.&lt;列名&gt; [AND &lt;别名&gt;.&lt;列名&gt;...]</code><br>\n使用表别名而不是子查询<br>\n<code>WHERE</code> 首先会联结表，然后按照条件过滤并返回数据</p>\n</li>\n<li>\n<p>自然联结 <code>NATURAL JOIN</code></p>\n</li>\n</ul>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被</span><br><span class=\"line\">联结的列）。标准的联结（前一章中介绍的内部联结）返回所有数据，甚</span><br><span class=\"line\">至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</span><br><span class=\"line\">    怎样完成这项工作呢？答案是，系统不完成这项工作，由你自己完</span><br><span class=\"line\">成它。自然联结是这样一种联结，其中你只能选择那些唯一的列。这一</span><br><span class=\"line\">般是通过对表使用通配符（SELECT *），对所有其他表的列使用明确的子</span><br><span class=\"line\">集来完成的。下面举一个(两个)例子:</span><br></pre></td></tr></table></figure>\n<p><img src=\"img/NaturalJoin.png\" alt=\"自然联结\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> C.<span class=\"operator\">*</span>, O.order_num, O.order_date,</span><br><span class=\"line\">OI.prod_id, OI.quantity, OI.item_price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers <span class=\"keyword\">AS</span> C, Orders <span class=\"keyword\">AS</span> O, OrderItems <span class=\"keyword\">AS</span> OI</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> C.cust_id <span class=\"operator\">=</span> O.cust_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> OI.order_num <span class=\"operator\">=</span> O.order_num</span><br><span class=\"line\"><span class=\"keyword\">AND</span> prod_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    在这个例子中，通配符只对第一个表使用。所有其他列明确列出，</span><br><span class=\"line\">所以没有重复的列被检索出来。</span><br><span class=\"line\">    事实上，迄今为止我们建立的每个内部联结都是自然联结，很可能</span><br><span class=\"line\">我们永远都不会用到不是自然联结的内部联结。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>外部连接 <code>OUTER JOIN</code></li>\n</ul>\n<blockquote>\n<p>将一个表中的行与另一个表中的行相关联，但有时候需要包含没有关联行的那些行</p>\n</blockquote>\n<ol start=\"0\">\n<li>\n<p>左外联结<br>\n<code>SELECT &lt;列名&gt;... FROM &lt;表名&gt; LEFT [OUTER] JOIN &lt;表名&gt; ON &lt;条件&gt;</code></p>\n</li>\n<li>\n<p>右外联结<br>\n<code>SELECT &lt;列名&gt;... FROM &lt;表名&gt; RIGHT [OUTER] JOIN &lt;表名&gt; ON &lt;条件&gt;</code></p>\n<ul class=\"φbr\">\n<li><input type=\"checkbox\" disabled=\"\"><i></i><strong>外部联结的类型</strong></li>\n</ul>\n <figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    存在两种基本的外部联结形式：左外部联结和右外部联结。它们</span><br><span class=\"line\">之间的唯一差别是所关联的表的顺序不同。换句话说，左外部联结可</span><br><span class=\"line\">通过颠倒FROM或WHERE子句中表的顺序转换为右外部联结。因此，两</span><br><span class=\"line\">种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"组合查询\">组合查询<a title=\"#组合查询\" href=\"#组合查询\"></a></h4>\n<blockquote>\n<p>将多条查询语句的结果合并为结果集</p>\n</blockquote>\n<ol start=\"0\">\n<li><code>UNION</code><br>\n<code>&lt;查询&gt; UNION &lt;查询&gt; [WHERE|ORDER BY...]</code><br>\n将会去除重复行</li>\n<li><code>UNION ALL</code><br>\n<code>&lt;查询&gt; UNION ALL [WHERE|ORDER BY...]</code><br>\n使用 <code>UNION ALL</code> 不会去除重复的行</li>\n</ol>\n<h4 id=\"窗口函数\">窗口函数<a title=\"#窗口函数\" href=\"#窗口函数\"></a></h4>\n<blockquote>\n<p>也称 <code>OLAP</code> 函数，<code>OnLine Analytical Processing</code> 的简称</p>\n</blockquote>\n<p><code>&lt;窗口函数&gt; OVER ([PARTITION BY &lt;列名&gt;...] ORDER BY &lt;列名&gt; [ASC|DESC]...)</code></p>\n<ul>\n<li>窗口函数</li>\n</ul>\n<ol start=\"0\">\n<li>聚合函数<br>\n<code>SUM</code> <code>AVG</code> <code>COUNT</code> <code>MAX</code> <code>MIN</code></li>\n<li>专用函数<br>\n<code>RANK</code> <code>DENSE RANK</code> <code>ROW_NUMBER</code>\n<ul>\n<li><code>RANK</code><br>\n计算排序时，如果存在相同位次的记录，则会跳过之后的位次。<br>\n例）有 3 条记录排在第 1 位时：1 位、1 位、1 位、4 位……</li>\n<li><code>DENSE_RANK</code><br>\n同样是计算排序，即使存在相同位次的记录，也不会跳过之后的位次。<br>\n例）有 3 条记录排在第 1 位时：1 位、1 位、1 位、2 位……</li>\n<li><code>ROW_NUMBER</code><br>\n赋予唯一的连续位次。<br>\n例）有 3 条记录排在第 1 位时：1 位、2 位、3 位、4 位……</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><code>PARTTION BY</code></li>\n</ul>\n<ol start=\"0\">\n<li>非必要<br>\n无需指定 <code>PARTITION BY</code> 窗口函数也照常工作</li>\n<li>分组汇总行数不变<br>\n<code>GROUP BY</code> 一个类别只有一行<br>\n<code>PARTITION BY</code> 不会减少原表的行数</li>\n</ol>\n<ul>\n<li>两个 <code>ORDER BY</code><br>\n<code>OVER</code> 中的 <code>ORDER BY</code> 与 <code>WHERE</code> 子句中的 <code>ORDER BY</code> 功能完全不相同<br>\n按需使用</li>\n</ul>\n<h3 id=\"文本搜索\">文本搜索<a title=\"#文本搜索\" href=\"#文本搜索\"></a></h3>\n<hr>\n<h4 id=\"使用正则进行搜索\">使用正则进行搜索<a title=\"#使用正则进行搜索\" href=\"#使用正则进行搜索\"></a></h4>\n<p><code>WHERE &lt;列名&gt; REGEXP &quot;正则表达式&quot;</code></p>\n<h4 id=\"全文搜索\">全文搜索<a title=\"#全文搜索\" href=\"#全文搜索\"></a></h4>\n<p><code>WHERE Match(列名) Against(表达式)</code></p>\n<ul>\n<li>全文搜索支持<br>\n在建表时使用 <code>FULLTEXT(列名)</code></li>\n<li>扩展查询<br>\n<code>WHERE Match(列名) Against(表达式 WITH QUERY EXPANSION)</code><br>\n用于查找可能的相关结果</li>\n</ul>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    首先，进行一个基本的全文本搜索，找出与搜索条件匹配</span><br><span class=\"line\">的所有行；</span><br><span class=\"line\">    其次，MySQL检查这些匹配行并选择所有有用的词（我们</span><br><span class=\"line\">将会简要地解释MySQL如何断定什么有用，什么无用）。</span><br><span class=\"line\">    再其次，MySQL再次进行全文本搜索，这次不仅使用原来</span><br><span class=\"line\">的条件，而且还使用所有有用的词。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>布尔文本搜索<br>\n<code>WHERE Match(列名) Against(表达式 IN BOOLEAN MODE)</code></li>\n</ul>\n<blockquote>\n<p>全文本布尔操作符</p>\n</blockquote>\n<ol start=\"0\">\n<li><code>+</code> : 包含，词必须存在</li>\n<li><code>-</code> : 排除，词必须不出现</li>\n<li><code>&gt;</code> : 包含，而且增加等级值</li>\n<li><code>&lt;</code> : 包含，且减少等级值</li>\n<li><code>()</code> : 把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）</li>\n<li><code>~</code> : 取消一个词的排序值</li>\n<li><code>*</code> : 词尾的通配符</li>\n<li><code>&quot;&quot;</code> : 定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）</li>\n</ol>\n<h3 id=\"视图\">视图<a title=\"#视图\" href=\"#视图\"></a></h3>\n<h3 id=\"游标\">游标<a title=\"#游标\" href=\"#游标\"></a></h3>\n<h3 id=\"触发器\">触发器<a title=\"#触发器\" href=\"#触发器\"></a></h3>\n<h3 id=\"事务管理\">事务管理<a title=\"#事务管理\" href=\"#事务管理\"></a></h3>\n<h3 id=\"其他\">其他<a title=\"#其他\" href=\"#其他\"></a></h3>\n<hr>\n<h4 id=\"插入检索出的数据\">插入检索出的数据<a title=\"#插入检索出的数据\" href=\"#插入检索出的数据\"></a></h4>\n<p><code>INSERT INTO &lt;表名(列名...)&gt; SELECT &lt;列名&gt;... FROM &lt;表名&gt;...</code><br>\n将一个表中查出来的数据插入另一个表中</p>\n<h2 id=\"bnf范式-参考\"><strong><code>BNF范式</code> 参考</strong><a title=\"#bnf范式-参考\" href=\"#bnf范式-参考\"></a></h2>\n<ul>\n<li><code>::=</code> 定义</li>\n<li><code>&lt;&gt;</code> 必要</li>\n<li><code>[]</code> 可选</li>\n<li><code>|</code> 或</li>\n<li><code>...</code> 可以出现多次或省略内容</li>\n</ul>\n","next":{"title":"浅拷贝与深拷贝","link":"2020/11/22/deepcopy"},"plink":"https://user-hrsat.github.io/2022/05/10/SQL要点/","toc":[{"id":"sql-要点","title":"SQL 要点","index":"1","children":[{"id":"表的创建","title":"表的创建","index":"1.1"},{"id":"表的更新","title":"表的更新","index":"1.2"},{"id":"表的查询","title":"表的查询","index":"1.3"},{"id":"文本搜索","title":"文本搜索","index":"1.4"},{"id":"视图","title":"视图","index":"1.5"},{"id":"游标","title":"游标","index":"1.6"},{"id":"触发器","title":"触发器","index":"1.7"},{"id":"事务管理","title":"事务管理","index":"1.8"},{"id":"其他","title":"其他","index":"1.9"}]},{"id":"bnf范式-参考","title":"BNF范式 参考","index":"2"}],"copyright":{"author":"User-Hrsat","link":"<a href=\"https://user-hrsat.github.io/2022/05/10/SQL要点/\" title=\"SQL要点\">https://user-hrsat.github.io/2022/05/10/SQL要点/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\">CC BY-NC-ND 4.0</a>)","updated":"2022年5月14日"}}